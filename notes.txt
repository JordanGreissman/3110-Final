Hubs produce resources
Clusters consume resources in order to sustain the population of the cluster
The production output of each cluster has to satisfy the needs of that cluster
(it is not the case that the total production across all clusters has to satisfy
the needs of all clusters combined).
If the resource needs of the cluster aren't met, production of hubs and clusters
takes twice as long

TODO: fix text in menu being cut off (it should wrap around)
TODO: tutorial
TODO: add clusters to initial map generation
TODO: implement describable interface
TODO: need to be careful of range issues with `change_*' functions
  => make sure that value can't overflow

I think clusters can be implemented differently. Instead of having the cluster
store any data about itself, have each tile store whether it is part of a tile.
This way, operations which modify clusters don't have to awkwardly return both
the updated cluster and the updated map, and the map becomes the sole authority
on the map state, as its name implies. One potential problem with this solution
is whether it then becomes an expensive operation to compute a list of all the
tiles in a certain cluster, but I think this can be done efficiently. Simply
start with the town hall of the cluster, and for each tile, add it to the list,
and then recursively look at its 6 neighbors, since the cluster must be
contiguous. This avoids a brute-force search for cluster membership.

Command bugs:
    NextTurn
    Tutorial
    Describe
    Research
    DisplayResearch
    Skip
    Move
    Attack
    PlaceHub
    Clear
    Produce
    AddEntityToHub
    Select*
    
